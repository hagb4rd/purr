module Data.Maybe {
  import Phemme.Core

  # -- Implicitly: data Maybe = Nothing | Just(_)
  export Nothing
  export Just
  export Maybe
  export Maybe?

  implement Equality for Maybe {
    method $this === $that ^Maybe? => case $this, $that of
                                      | Nothing, Nothing   => true
                                      | Just($a), Just($b) => $a == $b
                                      | _, _               => false
  }

  implement Representable for Maybe {
    method $this to-string => case $this of
                             | Nothing  => "Nothing"
                             | Just($a) => "Just(" + $a to-string + ")"
  }

  implement Semigroup for Maybe {
    method $this + $that ^Maybe? => case $this, $that of
                                 | Just($a), Just($b) => ($a + $b) Just
                                 | _, _               => Nothing
  }

  implement Monoid for Maybe {
    method $this empty => Nothing
  }

  implement Functor for Maybe {
    method $this map: $f => case $this of
                            | Nothing  => Nothing
                            | Just($a) => $f($a) Just
  }

  implement Applicative for Maybe {
    method $protocol of: $value => value Just
    method $this apply-to: $that => case $this of
                                    | Nothing  => $that
                                    | Just($f) => $that map: $f
  }

  implement Chainable for Maybe {
    method $this chain: $f => case $this of
                              | Nothing  => Nothing
                              | Just($a) => $f($a)
  }
  
}
