module Data.Maybe {
  import Phemme.Core

  # -- Implicitly: data Maybe = Nothing | Just(_)
  export ( Nothing, Just, Maybe, Maybe? )

  implement Equality for Maybe {
    method $this === $that ^Maybe? => match $this, $that {
      | Nothing, Nothing   => true
      | Just($a), Just($b) => $a == $b
      | _, _               => false
    }
  }

  implement Representable for Maybe {
    method $this to-string => match $this {
      | Nothing  => "Nothing"
      | Just($a) => "Just(" + $a to-string + ")"
    }
  }

  implement Semigroup for Maybe {
    method $this + $that ^Maybe? => match $this, $that {
      | Just($a), Just($b) => ($a + $b) Just
      | _, _               => Nothing
    }
  }

  implement Monoid for Maybe {
    method $this empty => Nothing
  }

  implement Functor for Maybe {
    method $this map: $f => match $this {
      | Nothing  => Nothing
      | Just($a) => $f($a) Just
    }
  }

  implement Applicative for Maybe {
    method $protocol of: $value => value Just
    method $this apply-to: $that => match $this {
      | Nothing  => $that
      | Just($f) => $that map: $f
    }
  }

  implement Chainable for Maybe {
    method $this chain: $f => match $this {
      | Nothing  => Nothing
      | Just($a) => $f($a)
    }
  }

  implement Foldable for Maybe {
    method $this fold-right: $f from: $b => match $this {
      | Nothing  => $b
      | Just($a) => $f($a)
    }
  }
  
  implement Alternative for Maybe {
    method none => Nothing
    method $this else: $that => match $this {
      | Nothing => $that
      | _       => $this
    }
  }
}
