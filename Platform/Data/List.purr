module Data.List is

  import Purr.Core
  import Data.Boolean
  import Data.Number
  import Data.Function
  
  let $x Positive? => $x >= 0
  
  # -- Implicitly: data List = Nil | _ :: List
  export ( Nil, ::, List, List? )
  
  implement Equality for List with
    method $this === $that ^List? => match $this, $that with
                                     | $x :: $xs, $y :: $ys => ($x === $y) && ($xs === $ys)
                                     | Nil, Nil             => true
                                     end
  end
  
  implement To-String for List with
    method $this to-string  => "[" + $this to-string1 + "]"
                               where
                               | $xs to-string1 => match $xs with
                                                   | $x :: Nil => $x to-string
                                                   | $x :: $ys => $x to-string + ", " + $ys to-string1
                                                   | Nil       => ""
                                                   end
                               end
  end
  
  implement Foldable for List with
    method $this fold: $f from: $b => ffi "(function() {
      while(true) {
        if ($this.$$ctag === 'Nil')  return $b
        if ($this.$$ctag !== '::')   throw new TypeError('Not a List.')
        var v = $this.$$0
        $b = $f($b, v)
        $this = $this.$$1
      }
    }())"
  
    method $this fold-right: $f from: $b => $this reverse fold: ^{ $a $b => $f($b, $a) } from: $b
  end
  
  implement Semigroup for List with
    method $this + $that ^List? => match $this, $that with
                                   | Nil, $ys       => $ys
                                   | $x :: $xs, $ys => $x :: ($xs + $ys)
                                   end
  end
  
  implement Monoid for List with
    method empty => Nil
  end
  
  implement Functor for List with
    method $this map: $f => $this fold-right: ^{ $x $xs => $f($x) :: $xs } from: Nil
  end
  
  implement Applicative for List with
    method $this of: $v => [$v]
    method $this apply-to: $that => $this >>= ($that map: _)
  end
  
  implement Monad for List with
    method $this chain: $f => $this map: ^{ $a => $f($a) } |> _ fold: (_ + _) from: Nil
  end
    
  export $xs ^List? reverse => $xs fold: ^{ $a $b => $b :: $a } from: Nil
  
  export $xs ^List? head => match $xs with
                            | Nil     => Nothing
                            | $x :: _ => $x Just
                            end
  
  export $xs ^List? head! => match $xs with
                             | $x :: _ => $x
                             end
  
  export $xs ^List? empty? => match $xs with
                              | Nil => true
                              | _   => false
                              end
  
  export $xs ^List? tail => match $xs with
                            | _ :: $ys => $ys
                            | _        => Nil
                            end
  
  export $xs ^List? instersperse: $separator => match $xs with
                                                | Nil       => Nil
                                                | $x :: $ys => $x :: ($separator prepended-to-all: $ys)
                                                end where
                                                | $separator' prepended-to-all: $zs => match $zs with
                                                                                       | Nil        => Nil
                                                                                       | $z :: $zs' => $separator' :: ($z :: ($separator' prepended-to-all: $zs'))
                                                                                       end
                                                end
    
  export $xs ^List? intercalate: $ys ^List? => ($xs instersperse: $ys) >>= _ identity
  
  export $xs ^List? take: $n ^Number? =>
    | $n <= 0   => Nil
    | otherwise => match $xs with
                   | Nil        => Nil
                   | $x :: $xs' => $x :: ($xs' take: ($n - 1))
                   end
  
  export $xs ^List? drop: $n ^Number? =>
    | $n <= 0   => $xs
    | otherwise => match $xs with
                   | Nil       => Nil
                   | _ :: $xs' => $xs' drop: ($n - 1)
                   end
  
  export $xs ^List? take-while: $p ^Function? => match $xs with
                                                 | $x :: $xs' => if $p($x) then $x :: ($xs' take-while: $p)
                                                                           else Nil
                                                 end
  
  export $xs ^List? drop-while: $p ^Function? => match $xs with
                                                 | $x :: $xs' => if $p($x) then $xs' drop-while: $p
                                                                           else $xs
                                                 end
  
  export $xs ^List? filter: $p => match $xs with
                                  | $x :: $xs' => if $p($x) then $x :: ($xs' filter: $p)
                                                            else $xs' filter: $p
                                  | Nil        => Nil
                                  end
  
  export $xs ^List? zip: $ys ^List? => match $xs, $ys with
                                       | $x :: Nil,  $y :: Nil  => (Tuple: $x With: $y) :: Nil
                                       | $x :: $xs', $y :: $ys' => (Tuple: $x With: $y) :: ($xs' zip: $ys')
                                       end
  
  export $xs ^List? zip-discarding: $ys ^List? => match $xs, $ys with
                                                  | $x :: $xs', $y :: $ys' => (Tuple: $x With: $y) :: ($xs' zip-discarding: $ys')
                                                  | _,          _          => Nil
                                                  end

end