module Data.List {
  import Phemme.Core
  import Data.Boolean
  import Data.Number
  import Data.Function

  let $x Positive? => $x >= 0
  
  # -- Implicitly: data List = Nil | _ :: List
  export Nil
  export ::
  export List
  export List?

  implement Equality for List {
    method $this === $that ^List? => match $this, $that {
      | $x :: $xs, $y :: $ys => ($x === $y) && ($xs === $ys)
      | Nil, Nil             => true
    }
  }

  implement Representable for List {
    method $this to-string  => "[" + $this to-string1 + "]"
                               where
                                 $xs to-string1 => match $xs {
                                   | $x :: Nil => $x to-string
                                   | $x :: $ys => $x to-string + ", " + $ys to-string1
                                   | Nil       => ""
                                   }
  }

  implement Foldable for List {
    method $this fold: $f from: $b => ffi "(function() {
      while(true) {
        if ($this.$$ctag === 'Nil')  return $b
        if ($this.$$ctag !== '::')   throw new TypeError('Not a List.')
        var v = $this.$$0
        $b = $f($b, v)
        $this = $this.$$1
      }
    }())"

    method $this fold-right: $f from: $b => $this reverse fold: ($a $b => $f($b, $a)) from: $b
  }

  implement Semigroup for List {
    method $this + $that ^List? => match $this, $that {
      | Nil, $ys       => $ys
      | $x :: $xs, $ys => $x :: ($xs + $ys)
      }
  }

  implement Monoid for List {
    method empty => Nil
  }

  implement Functor for List {
    method $this map: $f => $this fold-right: ($x $xs => $f($x) :: $xs) from: Nil
  }

  implement Applicative for List {
    method $this of: $v => [$v]
    method $this apply-to: $that => $this >>= ($that map: _)
  }

  implement Chainable for List {
    method $this chain: $f => $this map: ($a => $f($a)) |> _ fold: (_ + _) from: Nil
  }

  export $xs ^List? reverse => $xs fold: ($a $b => $b :: $a) from: Nil

  export $xs ^List? head => match $xs {
    | Nil     => Nothing
    | $x :: _ => $x Just
  }

  export $xs ^List? head! => match $xs {
    | $x :: _ => $x
  }

  export $xs ^List? empty? => match $xs {
    | Nil => true
    | _   => false
  }

  export $xs ^List? tail => match $xs {
    | _ :: $ys => $ys
    | _        => Nil
  }

  export $xs ^List? instersperse: $separator => match $xs {
    | Nil       => Nil
    | $x :: $ys => $x :: ($separator prepended-to-all: $ys)
  } where 
      $separator' prepended-to-all: $zs => match $zs {
        | Nil        => Nil
        | $z :: $zs' => $separator' :: ($z :: ($separator' prepended-to-all: $zs'))
      }
    
  export $xs ^List? intercalate: $ys ^List? => ($xs instersperse: $ys) >>= @identity

  export $xs ^List? take: $n ^Number? =>
    | $n <= 0   => Nil
    | otherwise => match $xs {
                     | Nil        => Nil
                     | $x :: $xs' => $x :: ($xs' take: ($n - 1))
                   }

  export $xs ^List? drop: $n ^Number? =>
    | $n <= 0   => $xs
    | otherwise => match $xs {
                     | Nil       => Nil
                     | _ :: $xs' => $xs' drop: ($n - 1)
                   }

  export $xs ^List? take-while: $p ^Function? => match $xs {
    | $x :: $xs' => if $p($x) then $x :: ($xs' take-while: $p)
                              else Nil
  }

  export $xs ^List? drop-while: $p ^Function? => match $xs {
    | $x :: $xs' => if $p($x) then $xs' drop-while: $p
                              else $xs
  }
  
  export $xs ^List? filter: $p => match $xs {
    | $x :: $xs' => if $p($x) then $x :: ($xs' filter: $p)
                              else $xs' filter: $p
    | Nil        => Nil
  }

  export $xs ^List? zip: $ys ^List? => match $xs, $ys {
    | $x :: Nil,  $y :: Nil  => (Tuple: $x With: $y) :: Nil
    | $x :: $xs', $y :: $ys' => (Tuple: $x With: $y) :: ($xs' zip: $ys')
  }

  export $xs ^List? zip-discarding: $ys ^List? => match $xs, $ys {
    | $x :: $xs', $y :: $ys' => (Tuple: $x With: $y) :: ($xs' zip-discarding: $ys')
    | _,          _          => Nil
  }
    
}
