module Data.Validation is

  import Purr.Core
  
  export
  data Validation = _ Invalid | _ Valid
  
  implement Equality for Validation with
    method $this === $that ^Validation? => match $this, $that with
                                           | $a Invalid, $b Invalid => $a === $b
                                           | $a Valid,   $b Valid   => $a === $b
                                           | _, _                   => false
                                           end
  end
  
  implement To-String for Validation with
    method $this to-string => match $this with
                              | $a Invalid => "Invalid(" + $a to-string + ")"
                              | $a Valid   => "Valid(" + $a to-string + ")"
                              end
  end
  
  implement Semigroup for Validation with
    method $this + $that ^Validation? => match $this, $that with
                                         | _ Invalid, _         => $this
                                         | _,         _ Invalid => $that
                                         | $a Valid,  $b Valid  => ($a + $b) Valid
                                         end
  end
  
  implement Functor for Validation with
    method $this map: $f => match $this with
                            | _ Invalid => $this
                            | $a Valid  => $f($a) Valid
                            end
  end
  
  implement Applicative for Validation with
    method _ of: $x => $x Valid
    method $this apply-to: $b ^Validation? => match $this, $that with
                                              | $e1 Invalid, $e2 Invalid => Invalid($e1 + $e2)
                                              | $e1 Invalid, _           => Invalid($e1)
                                              | _,           $e2 Invalid => Invalid($e2)
                                              | $f Valid,    _           => $b map: $f
                                              end
  end

end