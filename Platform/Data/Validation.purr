module Data.Validation {

  import Purr.Core
  
  export
  data Validation = _ Invalid | _ Valid
  
  implement Equality for Validation {
    method $this === $that ^Validation? => match $this, $that {
      | $a Invalid, $b Invalid => $a === $b
      | $a Valid,   $b Valid   => $a === $b
      | _, _                   => false
    }
  }
  
  implement To-String for Validation {
    method $this to-string => match $this {
      | $a Invalid => "Invalid(" + $a to-string + ")"
      | $a Valid   => "Valid(" + $a to-string + ")"
    }
  }
  
  implement Semigroup for Validation {
    method $this + $that ^Validation? => match $this, $that {
      | _ Invalid, _         => $this
      | _,         _ Invalid => $that
      | $a Valid,  $b Valid  => ($a + $b) Valid
    }
  }
  
  implement Functor for Validation {
    method $this map: $f => match $this {
      | _ Invalid => $this
      | $a Valid  => $f($a) Valid
    }
  }
  
  implement Applicative for Validation {
    method _ of: $x => $x Valid
    method $this apply-to: $b ^Validation? => match $this, $that {
      | $e1 Invalid, $e2 Invalid => Invalid($e1 + $e2)
      | $e1 Invalid, _           => Invalid($e1)
      | _,           $e2 Invalid => Invalid($e2)
      | $f Valid,    _           => $b map: $f
    }
  }

}