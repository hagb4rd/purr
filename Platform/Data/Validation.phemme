module Data.Validation {
  import Phemme.Core

  export
  data Validation = Invalid(_) | Valid(_)

  implement Equality for Validation {
    method $this === $that ^Validation? => match $this, $that {
      | Invalid($a), Invalid($b) => $a === $b
      | Valid($a),   Valid($b)   => $a === $b
      | _, _                     => false
    }
  }

  implement Representable for Validation {
    method $this to-string => match $this {
      | Invalid($a) => "Invalid(" + $a to-string + ")"
      | Valid($a)   => "Valid(" + $a to-string + ")"
    }
  }

  implement Semigroup for Validation {
    method $this + $that ^Validation? => match $this, $that {
      | Invalid(_), _          => $this
      | _,          Invalid(_) => $that
      | Valid($a),  Valid($b)  => ($a + $b) Valid
    }
  }

  implement Functor for Validation {
    method $this map: $f => match $this {
      | Invalid(_) => $this
      | Valid($a)  => $f($a) Valid
    }
  }

  implement Applicative for Validation {
    method _ of: $x => $x Valid
    method $this apply-to: $b ^Validation? => match $this, $that {
      | Invalid($e1), Invalid($e2) => Invalid($e1 + $e2)
      | Invalid($e1), _            => Invalid($e1)
      | _,            Invalid($e2) => Invalid($e2)
      | Valid($f),  _              => $b map: $f
    }
  }

}