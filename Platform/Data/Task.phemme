module Phemme.Data.Task {

  import Phemme.Core
  import Data.Function

  export data Task = _ ^Function? Cleanup: _ ^Function?
  export data TaskResult = _ Yield  # Succeeds with some result
                         | _ Throw  # Fails with some result
                         | Done     # Finishes the computation

  # -- Helpers
  let _ ~ _ => Unit # Convenience for running two functions
  let void  => Unit 
  let delayed($f) => ffi "setImmediate($f)"
  let once($f) => ffi "(function(a) { var result = $f(a); $f = function(){}; return result })"

  # -- Constructors
  export _ task: $f ^Function? => $f Cleanup: (=> void)
  export _ task: $f ^Function? cleanup: $g ^Function? => $f Cleanup: $g
  export _ fail: $x => task: $next => $next($x Throw)
  export never => task: => Unit

  # -- Runs things (meant for the end of the world, a la Haskell's unsafePerformIO)
  export $t ^Task? run: $f ^Function? recover: $g ^Function? => case $t of
    | $computation Cleanup: $cleanup =>
        let $state = $computation(@once($value => ( case $value of
                                                  | Yield($a) => $f($a)
                                                  | Throw($a) => $g($a)
                                                  | Done      => void
                                                  ) ~ (=> $cleanup($state, $value)) delayed))
        in $state

  export $t ^Task? run: $f ^Function? => case $t of
    | $computation Cleanup: $cleanup => 
        let $state = $computation(@once($value => ( case $value of
                                                  | Yield($a) => $f($a)
                                                  | Done      => void
                                                  ) ~ (=> $cleanup($state, $value)) delayed))
        in $state

  # -- Protocols
  implement Chainable for Task {
    method $task chain: $f =>
      task: ($next =>
             $task run: ($x => $f($x) run: @Yield ->> $next recover: @Throw ->> $next)
                   recover: @Throw ->> $next)
  }

  implement Functor for Task {
    method $task map: $f => $task >>= ($a => Task of: $f($a))
  }

  implement Applicative for Task {
    method _ of: $value => task: ($next => $next($value Yield))
    method $task apply-to: $mappable => $task >>= ($f => $mappable map: $f)
  }

  implement Monoid for Task {
    method $this empty => task: ($next => $next(Unit Yield))
  }

  implement Semigroup for Task {
    method $this + $that ^Task? => $this >>= $a => $that map: $b => $a + $b
  }
   
}
