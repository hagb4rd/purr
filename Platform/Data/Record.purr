module Data.Record is

  import Purr.Core
  import Data.List
  import Data.Tuple use (first => fst, second => snd)
  
  export ( Record? )
  
  implement Equality for Record with
    method $this === $that ^Record? => ffi "(function() {
      var xs = $this.$toObject(), ys = $that.$toObject()
      var ks1 = Object.keys(xs).sort(), ks2 = Object.keys(ys).sort()
  
      if (ks1.length !== ks2.length)  return false
      for (var i = 0; i < ks1.length; ++i) {
        var k1 = ks1[i], k2 = ks2[i]
        if (k1 !== k2)  return false
        if (!self['===']($this[k1], $that[k1]))  return false
      }
      return true
    }())"
  end
  
  implement To-String for Record with
    method $this to-string => ffi "(function() {
      var xs = $this.$toObject()
      var ks = Object.keys(xs)
      return '{'
           + ks.map(function(k){ return k + ' => ' + self['to-string']($this[k]) }).join(', ')
           + '}'
    }())"
  end
  
  implement Indexable for Record with
    method $this at: $index ^String? => ffi "$this[$index]? self.Just($this.$get($index))
                                                          : self.Nothing()"
  end
  
  implement Indexed-Container for Record with
    method $this at: $index ^String? put: $value => ffi "(function() {
      var result = $this.$clone()
      result[$index] = $value
      return result
    }())"
    method $this remove-at: $index => ffi "(function() {
      var result = $this.$clone()
      if ($index[0] === '$')  throw new Error('Invalid key: ' + $index)
      result[$index] = null
      return result
    })"
  end
  
  implement Semigroup for Record with
    method $this + $that ^Record? => ffi "$this.$with($that)"
  end
  
  implement Monoid for Record with
    method empty => {}
  end
  
  
  implement To-List for Record with
    method $this to-list => ffi "(function() {
      var xs = $this.$toObject()
      var ks = Object.keys(xs)
      return ks.map(function(k){ return self['Tuple:With:'](null, k, $this[k]) })
               .reduceRight(function(ys, y){ return self['::'](y, ys) }, self.Nil())
    }())"
  end

  implement From-List for Record with
    method $this from-list: $xs =>
      $xs fold-right: ^{ $x $v => $v at: $x fst put: $x snd } from: Record empty
  end

end