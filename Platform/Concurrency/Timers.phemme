module Concurrency.Timers {
  import Phemme.Core
  import Data.Number
  import Data.Boolean
  import Data.Task

  let $n Time? => ($n > 0) && ($n < 2147483647) # Max Int32

  export $n ^Time? delay =>
    task: ffi """(function($next) {
      var state = {}
      state.timerId = setTimeout(function(){
        if (state.ignore)  return
        $next($self.Success(null)) 
      }, $n)
      return state
    })"""
    cleanup: ffi """(function(state) {
      state.ignore = true
      clearTimeout(state.timerId)
    })"""

  export $n ^Time? timeout =>
    task: ffi """(function($next) {
      var state = {}
      state.timerId = setTimeout(function(){
        if (state.ignore)  return
        $next($self.Failure('Timeouted after ' + $n + ' milliseconds.')) 
      }, $n)
      return state
    })"""
    cleanup: ffi """(function(state) {
      state.ignore = true
      clearTimeout(state.timerId)
    })"""

}
