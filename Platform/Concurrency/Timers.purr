module Concurrency.Timers {

  import Purr.Core
  import Data.Number
  import Data.Boolean
  import Io.Task
  
  let $n Time? => ($n > 0) && ($n < 2147483647) # Max Int32
  
  export $n ^Time? delay =>
    task: ffi """(function($next) {
      return setTimeout(function(){
        $next(self.Yield(null)) 
      }, $n)
    })"""
    cleanup: ffi """(function(timerId) {
      clearTimeout(timerId)
    })"""
  
  export $n ^Time? timeout =>
    task: ffi """(function($next) {
      return setTimeout(function(){
        $next(self.Throw('Timeouted after ' + $n + ' milliseconds.')) 
      }, $n)
    })"""
    cleanup: ffi """(function(timerId) {
      clearTimeout(timerId)
    })"""
  
}