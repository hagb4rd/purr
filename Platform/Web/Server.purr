module Web.Server is

  import Purr.Core
  import Io.Task
  import Web.Data
  
  ffi """
  var $http  = require('http')
  var $https = require('https')
  
  function $wrapApplication(app) {
    return function(req, res) {
      var request = $$Request.$new(req)
      var task = app(request)
      self['run:recover:'](task, function(value) {
        if (self.$tag(value) !== self.Response().$$tag) {
          console.error('Expected a Response, got: ' + self.$tag(value))
          res.writeHead(500)
          res.end()
        } else {
          var status  = value.$$1
          var headers = value.$$2.$toPlainObject()
          var body    = value.$$3
  
          res.writeHead(status, headers)
          res.write(body)
          res.end()
        }
      }, function(error) {
        console.log(error)
        res.writeHead(500)
        res.end()
      })
    }
  }
  
  function $$Request() { }
  $$Request.$$name = 'Request'
  $$Request.$$tag = self.$newTag($$Request, $$package)
  $$Request.prototype.$$tag = $$Request.$$tag
  $$Request.$new = function(req) {
    var $$this = new $$Request()
    $$this._req  = req
    $$this._meta = Object.create(null)
    return $$this
  }
  $$Request.prototype.$set = function(key, value) {
    var result = Object.create(this)
    result._meta = Object.create(result._meta)
    result._meta[key] = value
    return result
  }
  $$Request.prototype.$get = function(name) {
    var v = this._meta[name]
    if (v == null)  return self.Nothing()
    else            return self.Just(v)
  }
  $$Request.prototype['http-method'] = function(self) {
    return self._req.method.toUpperCase()
  }
  $$Request.prototype['http-version'] = function(self) {
    return self._req.httpVersion
  }
  $$Request.prototype.headers = function(self) {
    return self._req.headers
  }
  $$Request.prototype.url = function(self) {
    return self._req.url
  }
  $$Request.prototype.body = function(self) {
    return self['task:'](self, function($next) {
      var data   = ''
      var source = self._req
  
      source.on('readable', grabChunk)
      source.on('end', fulfill)
      source.on('error', fail)
  
      function fail(error) {
        cleanup()
        $next(self.Throw(error))
      }
      function fulfill() {
        cleanup()
        $next(self.Yield(data))
      }
      function grabChunk() {
        var chunk = source.read()
        if (chunk != null) data += chunk.toString()
      }
      function cleanup() {
        source.removeListener('readable', grabChunk)
        source.removeListener('end', fulfill)
        source.removeListener('error', fail)
      }
    })
  }
  """
  
  export Request => ffi "$$Request"
  export $x Request? => ffi "self.$tag($x) === $$Request.$$tag"
  export $this ^Request? body => ffi "$this.body($this)"
  export $this ^Request? http-method => ffi "$this['http-method']($this)"
  export $this ^Request? url => ffi "$this.url($this)"
  export $this ^Request? http-version => ffi "$this['http-version']($this)"
  export $this ^Request? headers => ffi "$this.headers($this)"
  
  implement Indexable for Request with
    method $this at: $key ^String? => ffi "$this.$get($key)"
  end

  implement Indexed-Container for Request with
    method $this at: $key ^String? put: $value => ffi "$this.$set($key, $value)"
    method $this remove-at: $key ^String? => ffi "$this.$remove($key)"
  end
  
  export data Response = Status: _ ^Number? Headers: _ ^Record? Body: _
  
  export Body: $c => Status: 200 Headers: {} Body: $c
  
  export data Address = { address -> String?  # Bound address
                        , family  -> String?  # IP family
                        , port    -> Number?  # Bound port number
                        }
  
  
  let $app listen: $port host: $host server-factory: $factory =>
    task: ffi """(function($next) {
      var server = $factory($wrapApplication($app))
      server.listen($port, $host, function(error) {
        if (error)  $next(self.Throw(error))
        else {
          var addr = this.address()
          $next(self.Yield(self.Address().$new({
            address: function $address(_){ return addr.address },
            family:  function $family(_){ return addr.family },
            port:    function $port(_){ return addr.port }
          })))
        }
      })
      return server
    })"""
    cleanup: ffi """(function($server, $status) {
      if ($status.$$ctag !== 'Yield')
        $server.close()
    })"""
  
  
  export http: $app ^Function? listen: $port ^Number? host: $host ^String? =>
    $app 
    listen:         $port
    host:           $host
    server-factory: ffi "(function(app){ return $http.createServer(app) })" 
  
  export http: $app listen: $port => http: $app listen: $port host: "0.0.0.0"
  
  export https: $app ^Function? listen: $port ^Number? host: $host ^String? =>
    $app 
    listen:         $port
    host:           $host
    server-factory: ffi "(function(app){ return $https.createServer(app) })" 
  
  export https: $app listen: $port => https: $app listen: $port host: "0.0.0.0"

end