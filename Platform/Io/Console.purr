module Io.Console {

  import Purr.Core
  import Io.Task
  
  let _ ~ $x => $x
  let void => Unit Yield
  
  export $x ^To-String? display => 
    task: ^{ $next => ffi "console.log($text)" ~ $next(void) }
    where { $text = $x to-string }
  
  export $x ^To-String? display-error =>
    task: ^{ $next => ffi "console.error($text)" ~ $next(void) }
    where { $text = $x to-string }
  
  export $x ^To-String? display-warning =>
    task: ^{ $next => ffi "console.warn($text)" ~ $next(void) }
    where { $text = $x to-string }
  
  export $x ^To-String? display-info =>
    task: ^{ $next => ffi "console.info($text)" ~ $next(void) }
    where { $text = $x to-string }
  
  export $text ^String? write => 
    task: ^{ $next => ffi "process.stdout.write($text)" ~ $next(void) }
  
  export get-line =>
    task: ffi """(function($next) {
      var stdin = process.stdin
      var resolved = false
      stdin.setEncoding('utf8')

      var line = ''
      stdin.on('readable', onReadable)
      process.stdin.once('error', onError)

      function onError(error) {
        if (resolved)  return
        resolved = true
        cleanup()
        $next(self.Throw(error))
      }

      function onReadable(chunk) {
        if (resolved)  return
        var chunk
        while (null !== (chunk = stdin.read())) {
          var xs = chunk.split('\n')
          line += xs[0]
          if (xs.length > 1) {
            process.stdin.unshift(xs[1])
            resolved = true
            cleanup()
            $next(self.Yield(line))
          }
        }
      }

      function cleanup() {
        stdin.removeListener('error', onError)
        stdin.removeListener('readable', onReadable)
      }

      return cleanup
    })"""
    cleanup: ^{ $f => ffi "$f()" }

  export get-line: $prompt ^String? => do {
    $prompt write;
    get-line
  }
  

}