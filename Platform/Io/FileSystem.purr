module Io.FileSystem {

  import Purr.Core
  import Io.Task
  import Io.FileSystem.Path
  
  ffi "var $fs = require('fs')"
  
  # -- Helpers
  let $x ^String? asPath => match Path from-string: $x {
    | $a Success => $a
    }
  
  
  # -- Data structures
  export data LinkType = Directory | File | Junction
  
  implement To-String for LinkType {
    method $this to-string => match $this {
      | Directory => "<LinkType:Directory>"
      | File      => "<LinkType:File>"
      | Junction  => "<LinkType:Junction>"
      }
  }
  
  implement Equality for LinkType {
    method $this === $that => match $this, $that {
      | Directory, Directory => true
      | File,      File      => true
      | Junction,  Junction  => true
      | otherwise            => false
      }
  }
  
  
  # -- Path-level operations
  export $p ^Path? exists? =>
    task: ffi """(function($next) {
      $fs.exists(self['to-string']($p), function(a) { $next(self.Yield(a)) })
    })"""
  
  export $p ^Path? rename-to: $p2 ^Path =>
    task: ffi """(function($next) {
      $fs.rename(self['to-string']($p), self['to-string']($p2), function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  export $p ^Path? change-owner: $owner group: $group =>
    task: ffi """(function($next) {
      $fs.chown(self['to-string']($p), $owner, $group, function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  export $p ^Path? change-mode: $mode =>
    task: ffi """(function($next) {
      $fs.chmod(self['to-string']($p), $mode, function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  
  # -- Link operations
  export $p ^Path? link-to: $p2 ^Path? =>
    task: ffi """(function($next) {
      $fs.link(self['to-string']($p2), self['to-string']($p), function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  export $p ^Path? link-to: $p2 ^Path? type: $type ^LinkType? =>
    task: ffi """(function($next) {
      $fs.symlink(self['to-string']($p2), self['to-string']($p), self['render-type']($type), function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
    where { 
      $a render-type => match $a {
        | Directory => "dir"
        | File      => "file"
        | Junction  => "junction"
      }
    }
  
  export $p ^Path? read-link =>
    task: ffi """(function($next) {
      $fs.readlink(self['to-string']($p), function(error, data) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(self.asPath(data)))
      })
    })"""
  
  export $p ^Path? real-path =>
    task: ffi """(function($next) {
      $fs.realpath(self['to-string']($p), function(error, path) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(self.asPath(path)))
      })
    })"""
  
  # TODO: we need Structs to be able to expose this method
  let $p ^Path? stat =>
    task: ffi """(function($next) {
      $fs.stat(self['to-string']($p), function(error, stats) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(stats))
      })
    })"""
  
  export $p ^Path? file? => do {
    $stats <- $p stat;
    return ffi "$stats.isFile()"
  }
  
  export $p ^Path? directory? => do {
    $stats <- $p stat;
    return ffi "$stats.isDirectory()"
  }
    
  
  # -- Node-level operations
  export $p ^Path? read-as: $encoding ^String? =>
    task: ffi """(function($next) {
      $fs.readFile(self['to-string']($p),  { encoding: $encoding }, function(error, data) {
        if (error) $next(self.Throw(error))
        else       $next(self.Yield(data))
      })
    })"""
  
  export $p ^Path? read => $p read-as: "utf8"
  
  export $p ^Path? write: $data ^String? mode: $mode encoding: $encoding =>
    task: ffi """(function($next) {
      $fs.writeFile(self['to-string']($p), $data, { mode: $mode, encoding: $encoding }, function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  export $p ^Path? write: $data ^String? => $p write: $data mode: 0o666 encoding: "utf8"
  
  export $p ^Path? append: $data ^String? mode: $mode encoding: $encoding =>
    task: ffi """(function($next) {
      $fs.appendFile(self['to-string']($p), $data, { mode: $mode, encoding: $encoding }, function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  export $p ^Path? append: $data ^String? => $p append: $data mode: 0o666 encoding: "utf8"
  
  
  
  
  let $p remove-file =>
    task: ffi """(function($next) {
      $fs.unlink(self['to-string']($p), function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  let $p remove-directory =>
    task: ffi """(function($next) {
      $fs.rmdir(self['to-string']($p), function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  export $p ^Path? remove => $p stat >>= ^{ $stats =>
    | ffi "$stats.isFile()"      => $p remove-file
    | ffi "$stats.isDirectory()" => $p remove-directory
    | otherwise                  => "Can only remove files or directories" raise
    }

  let $p ^Path? mkdir: $mode =>
    task: ffi """(function($next) {
      $fs.mkdir(self['to-string']($p), $mode, function(error) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(null))
      })
    })"""
  
  export $p ^Path? make-directory: $mode =>
    if $p parent exists? then $p mkdir: $mode
                         else do {
                           $p parent make-directory: $mode;
                           $p make-directory: $mode
                         }
  
  export $p ^Path? make-directory => $p make-directory: 0o777
  
  export $p ^Path? list-directory =>
    task: ffi """(function($next) {
      $fs.readdir(self['to-string']($p), function(error, files) {
        if (error)  $next(self.Throw(error))
        else        $next(self.Yield(self.$arrayToList(files.map(function(f) {
                      return self['\\']($p, f)
                    }))))
      })
    })"""

}