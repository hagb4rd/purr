module Io.Console {
  import Phemme.Core
  import Data.Task

  ffi "var readline = require('readline')"

  let _ ~ _ => Nothing
  let void => @Success(Nothing)

  export $x ^Representable? display => 
    task: ($next => ffi "console.log($text)" ~ $next(void))
    where $text = $x describe

  export $x ^Representable? display-error =>
    task: ($next => ffi "console.error($text)" ~ $next(void))
    where $text = $x describe

  export $x ^Representable? display-warning =>
    task: ($next => ffi "console.warn($text)" ~ $next(void))
    where $text = $x describe

  export $x ^Representable? display-info =>
    task: ($next => ffi "console.info($text)" ~ $next(void))
    where $text = $x describe

  export $text ^String? write => 
    task: ($next => ffi "process.stdout.write($text)" ~ $next(void))

  export _ get-line =>
    let
      $rl = ffi "readline.createInterface({ input: process.stdin, output: process.stdout })"
    in
      task: ffi "(function($next) {
                   $rl.question('', function($text) {
                     $next($self.Success($text))
                   })
                 })"
      cleanup: _ => ffi "$rl.close()"

}
