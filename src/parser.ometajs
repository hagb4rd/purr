// Copyright (c) 2014 Quildreen Motta <quildreen@gmail.com>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/**
 * The parser for the Phemme language.
 *
 * @module phemme/parser
 */

/**
 * Reserved symbols in this language.
 */
var reserved = [ ':'  // Method parameter
               , '@'  // Decorator
               , '^'  // Contract
               , '_'  // Partial / Wildcard
               // Protocols
               , 'interface'
               , 'implement'
               , 'method'
               // Data structures
               , 'data'
               , 'struct'
               , 'field'
               , 'match'
               , 'case'
               // Modules
               , 'module'
               ]

/**
 * Verifies if a name can be used.
 */
function isValid(name) {
  return reserved.indexOf(name) !== -1
}

ometa Parser {
  // Lexical structure
  space   = ^space | comment,
  comment = fromTo('#', '\n'),
  ws      = space*,
  symbol  = ~(letter | digit | space
             | ';' | ',' | '.' | ':' | '[' | ']' | '{' | '}' | '(' | ')') char,
  eof     = ~~char,
  kw :xs  = seq(xs) ~(letter | digit | symbol | ':'),

  // Identifiers
  idStart    = letter,
  idRest     = letter | digit | symbol,
  identifier = <idStart idRest*>:a ~':' ?(isValid(a)) -> [#Id, a],
  keyword    = <idStart idRest*>:a ':'  ?(isValid(a)) -> [#Kw, a],
  symbols    = <symbol | ':'>+:as       ?(isValid(a)) -> [#Sym, a],

  // Values
  digits = <digit+>:a -> Number(a),
  number = digits:a ('.' digits:b)? -> [#Num, a, b || 0],
  
  stringEscape     = '\\' '"',
  stringChar       = (stringEscape | (~seq('"') char)):a -> a,
  unescapableChars = ~seq('"') char,
  string           = '"' <stringChar*>:as '"'           -> [#Str, a]
                   | '"""' <unescapableChars*>:as '"""' -> [#Str, as],

  vector = '[' ws expr:hd (ws ',' ws expr)*:tl ws ']' -> [#Vec, [hd].concat(tl)]
         | '[' ws ']'                                 -> [#Vec, []],

  map = '[|' ws mapExpr:hd (ws ',' ws mapExpr)*:tl ws '|]' -> [#Map, [hd].concat(tl)]
      | '[|' ws '|]'                                       -> [#Map, []],

  set = '#' vector:xs -> [#Set, xs[1]],

  // Patterns
  pattern = keywordPattern
          | binaryPattern
          | unaryPattern,

  keywordPattern = identifier:a (ws keywordArg)+:ks          -> [#KwPatt, a, ks],
  unaryPattern   = identifier:a ws identifier:b              -> [#Patt1, a, b],
  binaryPattern  = identifier:a ws symbols:b ws identifier:c -> [#Patt2, b, a, c],

  keywordArg     = keyword:k ws identifier:n -> [k, n],

  // Declarations
  declaration = module
              | letStmt,

  letStmt = kw('let') ws pattern:p ws "=>" ws expr:e -> [#Let, p, e],
  module = kw('module') ws identifier:a (ws keywordArg)*:ps
             ws '{' (ws declaration)*:xs ws '}' -> [#Mod, a, ps, xs],

  // Expressions
  expr = keywordExpr
       | binaryExpr,

  keywordExpr = binaryExpr:a (ws keywordApp)+:as -> [#Kw, a, as],
  binaryExpr  = binaryExpr:a ws symbols:s ws unaryExpr:b -> [#Bin, a, s, b]
              | unaryExpr,
  unaryExpr   = unaryExpr:a ws identifier:i -> [#Un, a, i]
              | primaryExpr,
  primaryExpr = value
              | identifier:a -> [#Var, a[1]]
              | '(' ws expr:a ws ')' -> a,

  keywordApp = keyword:k ws binaryExpr:v -> [k, v],

  // Program
  program = ws module:m ws eof -> m
}
