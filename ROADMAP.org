#+STARTUP: content
#+TODO: BACKLOG TODO WORKING | DONE DROPPED
#+TYP_TODO: FEATURE BUG | DONE

* 0.1 ~ Munchkin
** Compiler
*** BUG Protocols don't get properly merged on imports
*** BUG Pattern matching should check the type tag as well
*** BUG TCO directly-recursive functions
** Ecosystem
*** FEATURE Provide better utilities for handling failures
*** TODO Github's Linguist addition
*** TODO Pygments lexer
*** TODO Syntax-highlighting for major text editors/IDEs
- [ ] Emacs
- [ ] Vim
- [ ] Sublime Text
- [ ] Atom
** Libraries
*** TODO Remove ~Tuple:With:~ data structure
*** Core
**** TODO FFI
**** TODO Protocols
**** TODO Data
*** Data
**** TODO Boolean
**** TODO Number
**** TODO Maybe
**** TODO Either
**** TODO Validation
**** TODO String
**** TODO Char
**** TODO Function
**** TODO List
**** TODO Vector
**** TODO Set
**** TODO Map
**** TODO Record
**** TODO Date
*** Control
**** TODO Monad
*** Concurrency
**** TODO Async
**** TODO Timer
*** Debug
**** TODO Trace
*** I/O
**** TODO Plan
**** TODO Plan.Combinators
**** TODO Task
**** TODO Console
**** TODO FileSystem
***** BUG Provide better types for Mode and Encoding
***** BUG ~write:mode:encoding:~ should accept Strings/Buffers/Streams
**** TODO Process
**** TODO Shell
**** TODO Zip
**** TODO Crypto
*** Web
**** TODO HTTP
**** TODO URI
**** TODO Server
*** Database
**** TODO Driver.PostgreSQL
**** TODO Driver.MySQL
**** TODO Modelling
*** Language
**** TODO Parsing
**** TODO JSON
**** TODO HTML
**** TODO SQL
*** Test
**** TODO QuickCheck
**** TODO Spec
**** TODO Benchmark
** Documentation
*** TODO Write tutorials for getting started with Purr
*** TODO Document the language's grammar
*** TODO Document language's semantics
** Tooling
*** BUG Allow defining load paths for compiler / REPL
** Syntax
** Semantics
*** BUG Records should only accept functions

*** BUG [#A] Protocol implementations should be late bound           :EASY:
*** TODO Remove inline FFI                                           :EASY:
*** TODO Make all names late-bound in Modules
*** TODO Merge ~use~ and ~import~

*** TODO Inline example / quickcheck tests
* Future
** FEATURE Contracts for module dependencies
** TODO Linting/Formatting tool
** FEATURE Track a binding's history
The REPL allows one to overwrite bindings. It would be cool if these could be tracked, so:

#+BEGIN_SRC: shell
$ bin/ipurr --run-io

> let foo => 1
# => (<function>) <function: foo>
> foo
# => (<number>) 1
> let foo => 2
# *** Note: Overwriting binding: foo
# => (<function>) <function: foo>
> foo
# => (<number>) 2
> foo history
# => (<#List:Purr.Core>) [<function: foo>, <function: foo>]
> foo history first map: source
# => (<#Maybe:Purr.Core>) Just(function $foo($_) { return 2; })
> foo history last map: source 
# => (<#Maybe:Purr.Core>) Just(function $foo($_) { return 1; })
> foo history last map: (foo rollback-to: _) |> _ get-or-else: (Task of: Unit)
# (This returns an Io.Task)
> foo
# => (<number>) 1
#+END_SRC
** FEATURE [#C] Store REPL results in ${1..9} variables               :EASY:
** FEATURE [#B] Provide different interpreters for the ~main~ function :EASY:
This would allow someone to directly run a module that returns a webserver with something like: purr run-server Module --port 8080, whereas run would expect the type Task<Unit>.

We could also allow these different interpreters to be installed as modules/plugins, similar to Leiningen.
** FEATURE [#B] Give functions different tags based on their arity
This solves the problem with ambiguity in the use of parenthesis and the problem with enforcing proper arities, it also allows other things to be used as "blocks".
** FEATURE [#C] Support predicate constraints in patterns
** FEATURE [#C] Allow named instances
** BUG [#A] Make ~from-string:~ work consistently                     :EASY:
In Number it ignores leading/trailing whitespace, in Boolean and other custom types it does not.
** FEATURE Gradual typing                                    :NEEDS:RESEARCH:
** TODO [#C] Revisit the core protocol hierarchy
Too many unlawful protocols, and too many protocols that could be split up into different things to be more useful.
** BUG [#A] Enforce consistent patterns
Currently you can have:

#+BEGIN_SRC: purr
match x {
  | a, b => # runtime error here
}
#+END_SRC
  
** TODO Literate Purr dialect
** FEATURE [#A] Mirror-based reflection
** TODO Documentation generator
** BUG Handle generated variables properly
Currently we can't reason about name collisions in generated code
** FEATURE [#C] Allow pattern matching inside do-notation
** BUG [#B] Multi-line strings shouldn't consider indentation as part of the string
